jobs:
- job: Windows_CI_Dev
  variables:
    buildDirectory: '$(Build.BinariesDirectory)'
  steps:    
    - task: UniversalPackages@0
      displayName: 'Download python'
      inputs:
        command: download
        vstsFeed: '$(System.TeamProject)'
        vstsFeedPackage: 'anaconda3_win64'
        vstsPackageVersion: '5.3.0'
        downloadDirectory: '$(Build.BinariesDirectory)\python'
    - task: CmdLine@1
      displayName: 'Run python installer'
      inputs:
        filename: '$(Build.BinariesDirectory)\python\installer.exe'
        arguments: '/S /NoRegistry=1 /AddToPath=0 /RegisterPython=0 /D=$(Build.BinariesDirectory)\packages\python'
      timeoutInMinutes: 10
   - task: BatchScript@1
     displayName: 'Run post_build_vsts.bat'
     inputs:
       filename: '$(Build.SourcesDirectory)\tools\ci_build\github\windows\setup_env.bat'
       modifyEnvironment: true
       workingFolder: '$(Build.BinariesDirectory)'
    - task: CmdLine@1
      displayName: 'Install conda modules'
      inputs:
        filename: '$(Build.BinariesDirectory)\packages\python\scripts\conda.exe'
        arguments: 'install -q --insecure -y pyopenssl setuptools wheel numpy onnx'
      timeoutInMinutes: 10
    - task: CmdLine@1
      displayName: 'Download cmake'
      inputs:
        filename: '$(Build.BinariesDirectory)\packages\python\python.exe'
        arguments: '$(Build.SourcesDirectory)\tools\ci_build\github\windows\download_cmake.py --build_dir $(Build.BinariesDirectory)'
    - task: CmdLine@1
      displayName: 'Download test data and generate cmake config'
      inputs:
        filename: '$(Build.BinariesDirectory)\packages\python\python.exe'
        arguments: '$(Build.SourcesDirectory)\tools\ci_build\build.py --build_dir $(Build.BinariesDirectory) --skip_submodule_sync --cmake_path $(Build.BinariesDirectory)\cmake\bin\cmake.exe --ctest_path $(Build.BinariesDirectory)\cmake\bin\ctest.exe --config Debug Release --use_tvm --enable_pybind --use_mkldnn --use_mklml --use_openmp --build_shared_lib  --enable_onnx_tests --update'
        workingDirectory: "$(Build.BinariesDirectory)"

    - task: VSBuild@1
      displayName: 'Build Debug'
      inputs:
        solution: '$(Build.BinariesDirectory)\Debug\onnxruntime.sln'
        platform: 'x64'
        configuration: 'Debug'
        msbuildArgs: '/m'
        msbuildArchitecture: 'x64'
        workingFolder: '$(Build.BinariesDirectory)\Debug'
    - task: BatchScript@1
      displayName: 'Test Debug'
      inputs:
        filename: '$(Build.BinariesDirectory)\packages\python\python.exe'
        arguments: '$(Build.SourcesDirectory)\tools\ci_build\build.py --build_dir $(Build.BinariesDirectory) --skip_submodule_sync --cmake_path $(Build.BinariesDirectory)\cmake\bin\cmake.exe --ctest_path $(Build.BinariesDirectory)\cmake\bin\ctest.exe --config Debug --use_tvm --enable_pybind --use_mkldnn --use_mklml --use_openmp --build_shared_lib  --enable_onnx_tests --test'
        workingFolder: '$(Build.BinariesDirectory)'
    - task: VSBuild@1
      displayName: 'Build C# Debug'
      inputs:
        solution: '$(Build.SourcesDirectory)\csharp\OnnxRuntime.CSharp.sln'
        configuration: 'Debug'
        msbuildArgs: '/m'
        restoreNugetPackages: true
        msbuildArchitecture: 'x64'
        workingFolder: '$(Build.BinariesDirectory)\Debug'
    - task: VSBuild@1
      displayName: 'Build Release'
      inputs:
        solution: '$(Build.BinariesDirectory)\Release\onnxruntime.sln'
        platform: 'x64'
        configuration: 'Release'
        msbuildArchitecture: 'x64'
        workingFolder: '$(Build.BinariesDirectory)\Release'
    - task: BatchScript@1
      displayName: 'Test Release'
      inputs:
        filename: '$(Build.BinariesDirectory)\packages\python\python.exe'
        arguments: '$(Build.SourcesDirectory)\tools\ci_build\build.py --build_dir $(Build.BinariesDirectory) --skip_submodule_sync --cmake_path $(Build.BinariesDirectory)\cmake\bin\cmake.exe --ctest_path $(Build.BinariesDirectory)\cmake\bin\ctest.exe --config Debug --use_tvm --enable_pybind --use_mkldnn --use_mklml --use_openmp --build_shared_lib  --enable_onnx_tests --test'
        workingFolder: "$(Build.BinariesDirectory)"
    - task: VSBuild@1
      displayName: 'Build c# Release'
      inputs:
        solution: '$(Build.SourcesDirectory)\csharp\OnnxRuntime.CSharp.sln'
        configuration: 'Release'
        msbuildArchitecture: 'x64'
        msbuildArgs: '/m'
        restoreNugetPackages: true
        workingFolder: '$(Build.BinariesDirectory)\Release'

    - task: PublishTestResults@2
      displayName: 'Publish unit test results'
      inputs:
        testResultsFiles: '**\*.results.xml'
        searchFolder: '$(Build.BinariesDirectory)'
        testRunTitle: 'Unit Test Run'
      condition: succeededOrFailed()

    - task: CmdLine@1
      displayName: 'Clean build folders/files'
      inputs:
        filename: rd
        arguments: '/s /q $(Agent.BuildDirectory)'
      continueOnError: true
      condition: always()
